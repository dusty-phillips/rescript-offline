// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Db$RescriptOffline from "./Db.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as Sync$RescriptOffline from "./Sync.bs.js";
import * as NavBar$RescriptOffline from "./NavBar.bs.js";
import * as AllTags$RescriptOffline from "./AllTags.bs.js";
import * as ViewRecipe$RescriptOffline from "./ViewRecipe.bs.js";
import * as AddRecipeForm$RescriptOffline from "./AddRecipeForm.bs.js";

function addTagCallback(db, recipes, tags, tag, id) {
  var recipe = Belt_MapString.get(recipes, id);
  if (recipe === undefined) {
    return Promise.resolve(undefined);
  }
  var tagRecord_recipes = Belt_Array.concat(Belt_Option.getWithDefault(Belt_MapString.get(tags, tag), []), [id]);
  var tagRecord_updatedAt = Date.now();
  var tagRecord = {
    tag: tag,
    recipes: tagRecord_recipes,
    updatedAt: tagRecord_updatedAt
  };
  var newRecipe_id = recipe.id;
  var newRecipe_title = recipe.title;
  var newRecipe_ingredients = recipe.ingredients;
  var newRecipe_instructions = recipe.instructions;
  var newRecipe_tags = Belt_Array.concat(recipe.tags, [tag]);
  var newRecipe_updatedAt = recipe.updatedAt;
  var newRecipe = {
    id: newRecipe_id,
    title: newRecipe_title,
    ingredients: newRecipe_ingredients,
    instructions: newRecipe_instructions,
    tags: newRecipe_tags,
    updatedAt: newRecipe_updatedAt
  };
  return Promise.all([
                db.recipes.upsert(newRecipe).then(function (param) {
                      
                    }),
                db.tags.upsert(tagRecord).then(function (param) {
                      
                    })
              ]).then(function (param) {
              
            });
}

function App(Props) {
  var match = React.useState(function () {
        
      });
  var setDb = match[1];
  var dbOption = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setRecipes = match$1[1];
  var recipes = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setTags = match$2[1];
  var tags = match$2[0];
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  React.useEffect((function () {
          var dbPromise = Db$RescriptOffline.make(undefined).then(function (db) {
                Curry._1(setDb, (function (param) {
                        return db;
                      }));
                db.recipes.syncGraphQL({
                      url: "/graphql",
                      pull: {
                        queryBuilder: Sync$RescriptOffline.recipeQueryBuilder
                      },
                      deletedFlag: "deleted",
                      live: true
                    });
                db.tags.syncGraphQL({
                      url: "/graphql",
                      pull: {
                        queryBuilder: Sync$RescriptOffline.taggedRecipesQueryBuilder
                      },
                      deletedFlag: "deleted",
                      live: true
                    });
                Db$RescriptOffline.subscribeAll(db.recipes, (function (recipeDocs) {
                        var newRecipes = Belt_Array.reduce(Belt_Array.map(recipeDocs, (function (prim) {
                                    return prim.toJSON();
                                  })), undefined, (function (recipes, recipe) {
                                return Belt_MapString.set(recipes, recipe.id, recipe);
                              }));
                        return Curry._1(setRecipes, (function (_prev) {
                                      return newRecipes;
                                    }));
                      }));
                Db$RescriptOffline.subscribeAll(db.tags, (function (tagDocs) {
                        var newTags = Belt_Array.reduce(Belt_Array.map(tagDocs, (function (prim) {
                                    return prim.toJSON();
                                  })), undefined, (function (tags, taggedRecipes) {
                                return Belt_MapString.set(tags, taggedRecipes.tag, taggedRecipes.recipes);
                              }));
                        return Curry._1(setTags, (function (_prev) {
                                      return newTags;
                                    }));
                      }));
                return db;
              });
          return (function (param) {
                    dbPromise.then(function (db) {
                          return db.destroy();
                        });
                    
                  });
        }), [
        setDb,
        setRecipes,
        setTags
      ]);
  if (dbOption === undefined) {
    return React.createElement("div", undefined, "Loading your database...");
  }
  var match$3 = url.path;
  var component;
  var exit = 0;
  if (match$3) {
    switch (match$3.hd) {
      case "recipes" :
          var match$4 = match$3.tl;
          if (match$4) {
            var id = match$4.hd;
            if (id === "add") {
              if (match$4.tl) {
                exit = 1;
              } else {
                component = React.createElement(AddRecipeForm$RescriptOffline.make, {
                      addRecipe: (function (recipe) {
                          return dbOption.recipes.insert(recipe).then(function (param) {
                                      
                                    });
                        })
                    });
              }
            } else if (match$4.tl) {
              exit = 1;
            } else {
              component = React.createElement("div", undefined, React.createElement(ViewRecipe$RescriptOffline.make, {
                        recipes: recipes,
                        id: id,
                        addTag: (function (tag, id) {
                            return addTagCallback(dbOption, recipes, tags, tag, id);
                          })
                      }));
            }
          } else {
            exit = 1;
          }
          break;
      case "tags" :
          if (match$3.tl) {
            exit = 1;
          } else {
            component = React.createElement(AllTags$RescriptOffline.make, {
                  tags: tags,
                  recipes: recipes
                });
          }
          break;
      default:
        exit = 1;
    }
  } else {
    component = React.createElement("div", undefined, "Home page");
  }
  if (exit === 1) {
    component = React.createElement("div", undefined, "Route not found");
  }
  return React.createElement("div", undefined, React.createElement(NavBar$RescriptOffline.make, {}), component);
}

var make = App;

export {
  addTagCallback ,
  make ,
  
}
/* react Not a pure module */
